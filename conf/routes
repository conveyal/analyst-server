# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~
GET           /                                   controllers.Application.index()

GET           /tutorial                                   controllers.Application.tutorial()

GET           /login                              controllers.Application.login()

GET           /create		                      controllers.Application.createUserForm()
POST          /createUser		                  controllers.Application.createUser()
POST 		  /createDemoProject 				  controllers.Application.createDemoProject()

GET           /logout                             controllers.Application.logout()

GET           /linkUser                           controllers.Application.linkUserProject(username:String, projectId:String)
POST          /setPassword                        controllers.Application.setPassword()

POST          /doLogin                            controllers.Application.doLogin()

GET           /messages                           controllers.Application.jsMessages()

# data api

GET           /api/user                           controllers.Api.getUser(id:String = null)
GET           /api/user/:id                       controllers.Api.getUser(id:String)
POST          /api/user/                          controllers.Api.createUser()
PUT           /api/user/:id                       controllers.Api.updateUser(id:String)
DELETE        /api/user/:id                       controllers.Api.deleteUser(id:String)

GET           /api/allProjects                    controllers.Api.getAllProject()

GET           /api/project                        controllers.Api.getProject(id:String = null)
GET           /api/project/:id/exemplarDay        controllers.Api.getExemplarDay(id:String)
GET           /api/project/:id                    controllers.Api.getProject(id:String)
POST          /api/project/                       controllers.Api.createProject()
PUT           /api/project/:id                    controllers.Api.updateProject(id:String)
DELETE        /api/project/:id                    controllers.Api.deleteProject(id:String)

GET           /api/shapefile                      controllers.Api.getShapefile(id:String ?= null, projectId:String ?= null)
GET           /api/shapefile/:id                  controllers.Api.getShapefileById(id:String)
POST          /api/shapefile/                     controllers.Api.createShapefile()
PUT           /api/shapefile/:id                  controllers.Api.updateShapefile(id:String)
DELETE        /api/shapefile/:id                  controllers.Api.deleteShapefile(id:String)

GET           /api/bundle                       controllers.Api.getBundle(id:String ?= null, projectId:String ?= null)
GET           /api/bundle/:id                   controllers.Api.getBundleById(id:String)
POST          /api/bundle                       controllers.Api.createBundle()
PUT           /api/bundle/:id                   controllers.Api.updateBundle(id:String)
DELETE        /api/bundle/:id                   controllers.Api.deleteBundle(id:String)

GET           /api/scenario                       controllers.ScenarioController.get(projectId:String ?= null)
GET           /api/scenario/:id                   controllers.ScenarioController.getById(id:String)
POST          /api/scenario                       controllers.ScenarioController.create()
PUT           /api/scenario/:id                   controllers.ScenarioController.update(id:String)
DELETE        /api/scenario/:id                   controllers.ScenarioController.delete(id:String)

GET           /api/query                          controllers.QueryController.getQuery(id:String ?= null, projectId:String ?= null, pointSetId: String ?= null)
GET           /api/query/:id                      controllers.QueryController.getQueryById(id:String)
POST          /api/query/                         controllers.QueryController.createQuery()
PUT           /api/query/:id                      controllers.QueryController.updateQuery(id:String)
DELETE        /api/query/:id                      controllers.QueryController.deleteQuery(id:String)
GET           /api/query/:id/bins	                controllers.QueryController.queryBins(id:String, timeLimit:Integer ?= 3600, weightByShapefile:String ?= null, weightByAttribute:String ?= null, groupBy:String ?= null, which: String, attributeName: String, compareTo: String = null)
GET           /api/query/:id/:compareTo/bins      controllers.QueryController.queryBins(id:String, timeLimit:Integer ?= 3600, weightByShapefile:String ?= null, weightByAttribute:String ?= null, groupBy:String ?= null, which: String, attributeName: String, compareTo:String)

GET           /tile/shapefile                     controllers.TilesImpl.shape(shapefileId:String, x:Integer, y:Integer, z:Integer, attributeName:String ?= null)

GET     /tile/spatial                  	controllers.TilesImpl.spatial(shapefileId:String, x:Integer, y:Integer, z:Integer, selectedAttributes:String	)
GET     /tile/single/:key1/:key2/:z/:x/:y.:format controllers.SinglePointTiles.surfaceComparison(key1:String, key2:String, which:String, x:Integer, y:Integer, z:Integer, showIso:Boolean ?= false, showPoints:Boolean ?= true, timeLimit:Integer ?= 3600, format:String)
GET     /tile/single/:key/:z/:x/:y.png   controllers.SinglePointTiles.surface(key:String, which:String, x:Integer, y:Integer, z:Integer, showIso:Boolean ?= false, showPoints:Boolean ?= true, timeLimit:Integer ?= 3600)
GET     /tile/query/:queryId/:z/:x/:y.png controllers.TilesImpl.query(queryId:String, x:Integer, y:Integer, z:Integer, timeLimit:Integer ?= 3600, weightByShapefile:String ?= null, weightByAttribute:String ?= null, groupBy:String ?= null, which: String, attributeName:String, compareTo:String = null)
GET     /tile/query/:queryId/:compareTo/:z/:x/:y.png controllers.TilesImpl.query(queryId:String, x:Integer, y:Integer, z:Integer, timeLimit:Integer ?= 3600, weightByShapefile:String ?= null, weightByAttribute:String ?= null, groupBy:String ?= null, which: String, attributeName:String, compareTo:String)

GET           /tile/transit                       controllers.TilesImpl.transit(bundleId:String, x:Integer, y:Integer, z:Integer)
GET           /tile/transitComparison             controllers.TilesImpl.transitComparison(bundleId1:String, bundleId2:String, x:Integer, y:Integer, z:Integer)

GET     /gis/query	                    controllers.Gis.query(queryId:String, timeLimit:Integer ?= 3600, weightByShapefile:String ?= null, weightByAttribute:String ?= null, groupBy:String ?= null, which: String, attributeName: String, compareTo:String ?= null)
GET     /gis/single                     controllers.Gis.result(key:String, which:String)
GET     /gis/singleComparison           controllers.Gis.resultComparison(key1:String, key2:String, which:String)

GET     /csv/single                     controllers.SinglePoint.csv(key:String, which:String)

POST     /api/single                    controllers.SinglePoint.result()
OPTIONS  /api/single                    controllers.SinglePoint.options()

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                       controllers.Assets.at(path="/public", file)
