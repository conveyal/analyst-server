# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~
GET     /		                controllers.Application.index()

GET     /login		            controllers.Application.login()
GET     /logout		            controllers.Application.logout()

GET     /createUser		        controllers.Application.createUser(username:String, password:String, email:String)
GET     /linkUser		        controllers.Application.linkUserProject(username:String, projectId:String)
POST    /setPassword		        controllers.Application.setPassword()

POST    /doLogin		        controllers.Application.doLogin()

GET		/messages				controllers.Application.jsMessages()

# data api

GET     /api/user					controllers.Api.getUser(id:String = null)
GET     /api/user/:id				controllers.Api.getUser(id:String)
POST    /api/user/					controllers.Api.createUser()
PUT     /api/user/:id				controllers.Api.updateUser(id:String)
DELETE  /api/user/:id				controllers.Api.deleteUser(id:String)

GET     /api/allProjects			controllers.Api.getAllProject()

GET     /api/project					controllers.Api.getProject(id:String = null)
GET     /api/project/:id/exemplarDay controllers.Api.getExemplarDay(id:String)
GET     /api/project/:id				controllers.Api.getProject(id:String)
POST    /api/project/					controllers.Api.createProject()
PUT     /api/project/:id				controllers.Api.updateProject(id:String)
DELETE  /api/project/:id				controllers.Api.deleteProject(id:String)

GET     /api/shapefile					controllers.Api.getShapefile(id:String ?= null, projectId:String ?= null)
GET     /api/shapefile/:id				controllers.Api.getShapefileById(id:String)
POST    /api/shapefile/					controllers.Api.createShapefile()
PUT     /api/shapefile/:id				controllers.Api.updateShapefile(id:String)
DELETE  /api/shapefile/:id				controllers.Api.deleteShapefile(id:String)

GET     /api/scenario					controllers.Api.getScenario(id:String ?= null, projectId:String ?= null)
GET     /api/scenario/:id				controllers.Api.getScenarioById(id:String)
POST    /api/scenario/					controllers.Api.createScenario()
PUT     /api/scenario/:id				controllers.Api.updateScenario(id:String)
DELETE  /api/scenario/:id				controllers.Api.deleteScenario(id:String)

GET     /api/query						controllers.Api.getQuery(id:String ?= null, projectId:String ?= null, pointSetId: String ?= null)
GET     /api/query/:id					controllers.Api.getQueryById(id:String)
POST    /api/query/						controllers.Api.createQuery()
PUT     /api/query/:id					controllers.Api.updateQuery(id:String)
DELETE  /api/query/:id					controllers.Api.deleteQuery(id:String)

GET     /tile/shapefile                 controllers.Tiles.shape(shapefileId:String, x:Integer, y:Integer, z:Integer, attributeName:String ?= null)

GET     /tile/spatial                  	controllers.Tiles.spatial(shapefileId:String, x:Integer, y:Integer, z:Integer, selectedAttributes:String	)
GET     /tile/surface                  	controllers.Tiles.surface(surfaceId:Integer, shapefileId:String, attributeName:String, x:Integer, y:Integer, z:Integer, showIso:Boolean ?= false, showPoints:Boolean ?= true, timeLimit:Integer ?= 3600, minTime:Integer ?= null)
GET     /tile/query	                    controllers.Tiles.query(queryId:String, x:Integer, y:Integer, z:Integer, timeLimit:Integer ?= 3600, weightByShapefile:String ?= null, weightByAttribute:String ?= null, groupBy:String ?= null, which: String, compareTo:String ?= null)

GET     /tile/transit                	controllers.Tiles.transit(scenarioId:String, x:Integer, y:Integer, z:Integer)
GET     /tile/transitComparison         controllers.Tiles.transitComparison(scenarioId1:String, scenarioId2:String, x:Integer, y:Integer, z:Integer)
GET     /tile/surfaceComparison         controllers.Tiles.surfaceComparison(surfaceId1:Integer, surfaceId2:Integer, shapefileId:String, attributeName:String, x:Integer, y:Integer, z:Integer, showIso:Boolean ?= false, showPoints:Boolean ?= false, timeLimit:Integer ?= 3600, minTime:Integer ?= null)

GET     /gis/query	                    controllers.Gis.query(queryId:String, timeLimit:Integer ?= 3600, weightByShapefile:String ?= null, weightByAttribute:String ?= null, groupBy:String ?= null, which: String, compareTo:String ?= null)
GET     /gis/surface	                controllers.Gis.surface(surfaceId:Integer, shapefileId:String, attributeName:String, timeLimit:Integer ?= 3600, compareTo:String ?= null)


GET     /api/queryBins	                controllers.Api.queryBins(queryId:String, timeLimit:Integer ?= 3600, weightByShapefile:String ?= null, weightByAttribute:String ?= null, groupBy:String ?= null, which: String, compareTo: String ?= null)

GET     /api/surface                    controllers.Api.surface(graphId:String, lat:Double, lon:Double, mode:String, bikeSpeed:Double, walkSpeed:Double, which:String, date:String, fromTime:Integer, toTime:Integer ?= -1)
GET	    /api/isochrone					controllers.Api.isochrone(surfaceId:Integer, cutoffs:java.util.List[Integer])
GET     /api/result						controllers.Api.result(surfaceId:Integer, shapefileId:String, attributeName:String)


# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
